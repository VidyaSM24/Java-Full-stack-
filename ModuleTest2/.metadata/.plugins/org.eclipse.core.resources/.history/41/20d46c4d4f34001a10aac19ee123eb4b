package com.capgemini.retailermaintenance.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceUnit;
import javax.persistence.TypedQuery;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Repository;

import com.capgemini.retailermaintenance.dto.OrderBean;
import com.capgemini.retailermaintenance.dto.ProductBean;
import com.capgemini.retailermaintenance.dto.UserBean;
import com.capgemini.retailermaintenance.exceptions.Exceptions;
@Repository
public class UserDaoImpl implements UserDao{
	@PersistenceUnit
	private EntityManagerFactory entityManagerFactory;

	@Override
	public UserBean userLogin(String userEmail, String userPassword) {
		EntityManager manager = entityManagerFactory.createEntityManager();
		String jpql= "from UserBean where email=:email ";
		TypedQuery <UserBean> query= manager.createQuery(jpql,UserBean.class);
		query.setParameter("email", userEmail);
		query.setParameter("password", userPassword);
		try {
		UserBean userBean =query.getSingleResult();
		BCryptPasswordEncoder encoder= new BCryptPasswordEncoder();
		if(encoder.matches(userPassword, userBean.getUserPassword())) {
			return userBean;
		}else {
			
			throw new Exceptions("password Invalid");
		}
		}catch (Exception e) {
			throw new Exceptions("email invalid");
	}
	}

	@Override
	public boolean profile(UserBean userBean) {
		EntityManager manager = entityManagerFactory.createEntityManager();
		EntityTransaction transaction= manager.getTransaction();
		transaction.begin();
		try {
			manager.persist(userBean);
			transaction.commit();
			return true;
		}catch (Exception e) {
			e.printStackTrace();
			throw new Exceptions("email already Exist");
		}
	}


	@Override
	public boolean changePassword(int userId, String userPassword) {
		EntityManager manager= entityManagerFactory.createEntityManager();
		EntityTransaction transaction=manager.getTransaction();
		transaction.begin();
		UserBean bean= manager.find(UserBean.class, userId);
		bean.setUserPassword(userPassword);
		transaction.commit();
		return true;
	}

	@Override
	public ProductBean getProducts(int productId) {
		String jpql="from ProductBean where productId=:productId";
		EntityManager manager=entityManagerFactory.createEntityManager();
		TypedQuery<ProductBean> query = manager.createQuery(jpql,ProductBean.class);
        query.setParameter("productId", productId);
		try {
			return query.getSingleResult();
		}catch (Exception e) {
		e.printStackTrace();
			return null;
	}
	}

	@Override
	public List<OrderBean> order(int userId) {
		String jpql="from OrderBean where userId=:userId";
		EntityManager manager= entityManagerFactory.createEntityManager();
		TypedQuery<OrderBean> query = manager.createQuery(jpql,OrderBean.class);
		 query.setParameter("userId", userId);
		return query.getResultList();
		}

}
